@startuml
package core{
	package base {
		note top of InputInterpreter  
			Parses the input it's
			desired way and outputs numbers
			1-10. No specific implementation.
			Future implementation may include
			physical devices
		end note
		abstract class InputInterpreter {
			- system: TypingSystem
			+ setTypingSystem(TypingSystem ts)
			+ passInput(int key)
		}


		InputInterpreter -> TypingSystem: Nums 1-10
		note bottom of TypingSystem
			Holds the inputed values,
			when needed values achieved
			parses config file for needed
			command and passes it to corresponding
			function within the Commandable context
		end note
		abstract class TypingSystem {
			- context: Commandable
			
			+ input(int key)
			+ executeCommand(String keys)
		}
	}
	note top of base
		The base package contains the classes and interfaces
		necessary to implement the WIT system.
	end note
	package commands {
		interface Commandable {

		}

		interface BasicCommandable extends AppendCommandable, MessageCommandable, DeleteCommandable {
		}

		interface AppendCommandable extends Commandable {
			+ typingAppend(AppendCommand c)
		}

		interface MessageCommandable extends Commandable {
			+ typingMessage(MessageCommand c)
		}

		interface DeleteCommandable extends Commandable {
			+ typingDelete(DeleteCommand c)
		}

		abstract class Command {
		}

		class AppendCommand extends Command {
			+ TYPE: Enum
			- uppercase: String
			- lowercase: String
		}

		class MessageCommand extends Command {
			+ TYPE: Enum
		}

		class DeleteCommand extends Command {
			+ TYPE: Enum
		}
	}
}

@enduml
