@startuml
package core{
	package base {
		note top of InputInterpreter  
			Parses the input from it's
			desired way and outputs numbers
			1-10. No specific implementation.\n
			Future implementations may be able
			to contain multiple TypingSystems
		end note
		abstract class InputInterpreter {
			- system: TypingSystem
			+ setTypingSystem(TypingSystem ts)
			+ passInput(int key)
		}


		InputInterpreter -> TypingSystem: Nums 1-10
		note bottom of TypingSystem
			Holds the inputed values,
			when needed values achieved
			parses config file for needed
			command
		end note
		class TypingSystem {
			- inputs: List<Integer>
			- context: Commandable
			
			+ input(int key)
			+ parseCommand(String keys) :: Command
		}
	}
	note top of base
		The base package contains the classes and interfaces
		necessary to implement the WIT system.
	end note
	package commands {
		interface Commandable {

		}

		interface BasicCommandable extends AppendCommandable, SystemCommandable, DeleteCommandable {
		}

		interface AppendCommandable extends Commandable {
			+ typingAppend(AppendCommand c)
		}

		interface SystemCommandable extends Commandable {
			+ typingMessage(SystemCommand c)
		}

		interface DeleteCommandable extends Commandable {
			+ typingDelete(DeleteCommand c)
		}

		class Command {
		}

		class AppendCommand extends Command {
			+ TYPE: Enum
			- uppercase: String
			- lowercase: String
		}

		class SystemCommand extends Command {
			+ TYPE: Enum
		}

		class DeleteCommand extends Command {
			+ TYPE: Enum
		}
	}
}

@enduml
